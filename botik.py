import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from PIL import Image, ImageDraw, ImageFont
import textwrap
from datetime import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8433286201:AAHyMW-gmwgWTRm8kTSEUkOlzmJV-KTkIAU"

# –®—Ä–∏—Ñ—Ç—ã
FONT_SEMIBOLD = "fonts/Roboto-SemiBold.ttf"
FONT_REGULAR = "fonts/Roboto-Regular.ttf"
FONT_BOLD = "fonts/SFProDisplay-Bold.ttf"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
    üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ Avtobys.

    üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¢–†–ò —Å—Ç—Ä–æ–∫–∏:
    1. –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 563BE04)
    2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 28 –∞–≤–≥—É—Å—Ç–∞ 2025 12:05
    3. –í—Ä–µ–º—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12:05

    –ù–∞–ø—Ä–∏–º–µ—Ä:
    563BE04
    28 –∞–≤–≥—É—Å—Ç–∞ 2025 12:05
    12:05
    """
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        text = update.message.text.strip()
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        if len(lines) < 3:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–†–ò —Å—Ç—Ä–æ–∫–∏:\n1. –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞\n2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n3. –í—Ä–µ–º—è –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—è")
            return
        
        ticket_number = lines[0]
        date_time_str = lines[1]
        second_time_str = lines[2]  # –í—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–∞
        if not re.match(r'^[A-Z0-9]{5,10}$', ticket_number):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (5-10 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è)
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "28 –∞–≤–≥—É—Å—Ç–∞ 2025 12:05"
            date_parts = date_time_str.split()
            if len(date_parts) < 4:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏")
            
            day = int(date_parts[0])
            month_str = date_parts[1].lower()
            year = int(date_parts[2])
            first_time_str = date_parts[3]  # –ü–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –∏–∑ –¥–∞—Ç—ã
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —á–∏—Å–ª–æ
            months = {
                '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
                '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
            }
            
            if month_str not in months:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if ':' in first_time_str:
                hours1, minutes1 = map(int, first_time_str.split(':'))
                if not (0 <= hours1 <= 23 and 0 <= minutes1 <= 59):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è")
                formatted_first_time = f"{hours1:02d}:{minutes1:02d}"
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            formatted_date_time = f"{day} {month_str} {year} {formatted_first_time}"
            
        except (ValueError, IndexError) as e:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 28 –∞–≤–≥—É—Å—Ç–∞ 2025 12:05\n"
                "–ü—Ä–∏–º–µ—Ä: 15 —Å–µ–Ω—Ç—è–±—Ä—è 2024 14:30"
            )
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        try:
            if ':' in second_time_str:
                hours2, minutes2 = map(int, second_time_str.split(':'))
                if not (0 <= hours2 <= 23 and 0 <= minutes2 <= 59):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
                formatted_second_time = f"{hours2:02d}:{minutes2:02d}"
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 12:05\n"
                "–ü—Ä–∏–º–µ—Ä: 14:30"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º edited_ticket.png
        output_path = edit_ticket_image(ticket_number, formatted_date_time, formatted_second_time)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –§–ê–ô–õ
        with open(output_path, 'rb') as file:
            await update.message.reply_document(
                document=file,
                filename=f"ticket_{ticket_number}.png",
                caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–ù–æ–º–µ—Ä: {ticket_number}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_date_time}\n–í—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è: {formatted_second_time}"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(output_path)
        
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def edit_ticket_image(ticket_number: str, date_time_str: str, second_time_str: str):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    base_image = Image.open("proez.png")
    draw = ImageDraw.Draw(base_image)
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
    coordinates = {
        'ticket_number': (653, 2537),  # x, y –¥–ª—è –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–∞
        'date_time': (447, 2680),      # x, y –¥–ª—è –¥–∞—Ç—ã –∏ –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        'second_time': (170, 65)       # x, y –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    }
    
    # –†–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤
    font_sizes = {
        'ticket_number': 64,
        'date_time': 64,
        'second_time': 66
    }
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        font_semibold = ImageFont.truetype(FONT_SEMIBOLD, font_sizes['ticket_number'])
        font_regular = ImageFont.truetype(FONT_REGULAR, font_sizes['date_time'])
        font_bold = ImageFont.truetype(FONT_BOLD, font_sizes['second_time'])
    except Exception as e:
        logger.error(f"Font error: {e}")
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font_semibold = ImageFont.load_default()
        font_regular = ImageFont.load_default()
        font_bold = ImageFont.load_default()
    
    # –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞
    draw.text(
        coordinates['ticket_number'],
        ticket_number,
        fill="#1F1F1F",
        font=font_semibold,
    )
    
    # –†–∏—Å—É–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è
    draw.text(
        coordinates['date_time'],
        date_time_str,
        fill="#3F3F3F",
        font=font_regular,
    )

    # –†–∏—Å—É–µ–º –≤—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    draw.text(
        coordinates['second_time'],
        second_time_str,
        fill="#0E0E0E",
        font=font_bold,
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = "/home/bbbbuunn/botik/Botik/edited_ticket.png"
    base_image.save(output_path)
    
    return output_path

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()